// Generated by CoffeeScript 1.9.2
(function() {
  $(function() {
    var $chatPage, $currentInput, $inputMessage, $loginPage, $messages, $usernameInput, $window, COLORS, FADE_TIME, TYPING_TIMER_LENGTH, addChatMessage, addMessageElement, cleanInput, connected, getUsernameColor, log, sendMessage, setUsername, socket, username;
    FADE_TIME = 150;
    TYPING_TIMER_LENGTH = 400;
    COLORS = ['#e21400', '#91580f', '#f8a700', '#f78b00', '#58dc00', '#287b00', '#a8f07a', '#4ae8c4', '#3b88eb', '#3824aa', '#a700ff', '#d300e7'];
    $window = $(window);
    $usernameInput = $('.usernameInput');
    $messages = $('.messages');
    $inputMessage = $('.inputMessage');
    $loginPage = $('.login.page');
    $chatPage = $('.chat.page');
    connected = false;
    username = null;
    $currentInput = $usernameInput.focus();
    socket = io();
    $window.keydown(function(event) {
      if (!(event.ctrlKey || event.metaKey || event.altKey)) {
        $currentInput.focus();
      }
      if (event.which === 13) {
        if (username) {
          return sendMessage();
        } else {
          return setUsername();
        }
      }
    });
    setUsername = function() {
      username = cleanInput($usernameInput.val().trim());
      console.log("client: USERNAME ENTERED: " + username);
      if (username != null) {
        $loginPage.fadeOut();
        $chatPage.show();
        $loginPage.off('click');
        $currentInput = $inputMessage.focus();
        return socket.emit('add user', username);
      }
    };
    sendMessage = function() {
      var message;
      message = cleanInput($inputMessage.val());
      if (message && connected) {
        $inputMessage.val('');
        socket.emit('new message', message);
        return addChatMessage({
          username: username,
          message: message
        });
      }
    };
    log = function(message, options) {
      var $el;
      $el = $('<li>').addClass('log').text(message);
      return addMessageElement($el, options);
    };
    addChatMessage = function(data, options) {
      var $messageBodyDiv, $messageDiv, $usernameDiv, userColor;
      userColor = getUsernameColor(data.username);
      console.log("addchat NAME!:" + data.username + " || COLOR: " + userColor);
      $usernameDiv = $('<span class="username"/>').text(data.username).css('color', userColor);
      $messageBodyDiv = $('<span class="messageBody">').text(data.message);
      $messageDiv = $('<li class="message"/>').data('username', data.username).addClass("").append($usernameDiv, $messageBodyDiv);
      return addMessageElement($messageDiv, options);
    };
    addMessageElement = function(el, options) {
      var $el;
      if (options == null) {
        options = {};
      }
      $el = $(el);
      if (options.fade == null) {
        options.fade = true;
      }
      if (options.prepend == null) {
        options.prepend = false;
      }
      if (options.fade) {
        $el.hide().fadeIn(FADE_TIME);
      }
      if (options.prepend) {
        $messages.prepend($el);
      } else {
        $messages.append($el);
      }
      return $messages[0].scrollTop = $messages[0].scrollHeight;
    };
    getUsernameColor = function(name) {
      var hash, i, index, j, ref;
      console.log("USERNAME-IN: " + name);
      hash = 7;
      for (i = j = 0, ref = name.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        hash = name.charCodeAt(i) + (hash << 5) - hash;
      }
      index = Math.abs(hash % COLORS.length);
      return COLORS[index];
    };
    cleanInput = function(input) {
      return $('<div/>').text(input).text();
    };
    socket.on('login', function(username) {
      connected = true;
      return console.log("client: user connected:" + username);
    });
    socket.on('new message', function(data, options) {
      return addChatMessage(data, options);
    });
    return socket.on('announcement', function(message) {
      return log(message);
    });
  });

}).call(this);
